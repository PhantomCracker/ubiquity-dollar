name: Diamond Storage Check

on:
  push:
  pull_request:

jobs:
  generate_and_save_pr_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.14.1"

      - name: Install dependencies
        run: sudo apt -y update && sudo apt -y install libusb-1.0-0-dev libudev-dev

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-cc5637a979050c39b3d06bc4cc6134f0591ee8d0

      - name: Yarn Install
        run: yarn install --mode=skip-build && yarn allow-scripts

      - name: Set Environment Variables
        env:
          INFURA_ID: ${{ secrets.INFURA_ID }}
          API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
        run: |
          echo "INFURA_ID=$INFURA_ID" > ./packages/dapp/.env
          echo "API_KEY_ALCHEMY=$API_KEY_ALCHEMY" >> ./packages/dapp/.env

      - name: Setup Forge
        run: yarn workspace @ubiquity/contracts forge:install

      - name: Build All
        env:
          FOUNDRY_DENY_WARNINGS: true
        run: yarn build

      - name: Run Diamond Storage Check - PR branch
        id: save_pr_output
        run: |
          cd ./utils
          yes 2>/dev/null | npx tsx ./diamond-storage.ts
          cd ../packages/contracts
          echo "::set-output name=pr-storage-output::$(cat pr_storage_output.txt)"
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Run Libs Storage Check - PR branch
        id: save_libs_pr_output
        run: |
          cd ./utils
          yes 2>/dev/null | npx tsx ./libs-storage.ts
          mkdir pr_files
          echo "LS1: "
          ls
          mv pr_libs_storage_output_*.txt pr_files/
          echo "LS2: "
          ls
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Save PR Files as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: pr_files
          path: ./utils/pr_files


  generate_and_save_dev_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to development
        uses: actions/checkout@v2
        with:
          ref: development

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.14.1"

      - name: Install dependencies
        run: sudo apt -y update && sudo apt -y install libusb-1.0-0-dev libudev-dev

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-cc5637a979050c39b3d06bc4cc6134f0591ee8d0
#
      - name: Yarn Install
        run: yarn install --mode=skip-build && yarn allow-scripts

      - name: Set Environment Variables
        env:
          INFURA_ID: ${{ secrets.INFURA_ID }}
          API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
        run: |
          echo "INFURA_ID=$INFURA_ID" > ./packages/dapp/.env
          echo "API_KEY_ALCHEMY=$API_KEY_ALCHEMY" >> ./packages/dapp/.env

      - name: Setup Forge
        run: yarn workspace @ubiquity/contracts forge:install
#
      - name: Build All
        env:
          FOUNDRY_DENY_WARNINGS: true
        run: yarn build
#
      - name: Run Diamond Storage Check - development
        id: save_dev_output
        run: |
          cd ./utils
          yes 2>/dev/null | npx tsx ./diamond-storage.ts
          cd ../packages/contracts
          echo "::set-output name=dev-storage-output::$(cat dev_storage_output.txt)"
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Run Libs  Storage Check - development
        id: save_libs_dev_output
        run: |
          cd ./utils
          yes 2>/dev/null | npx tsx ./libs-storage.ts
          mkdir dev_files
          echo "LS1: "
          ls
          mv dev_libs_storage_output_*.txt dev_files/
          echo "LS2: "
          ls
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Save Dev Files as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: dev_files
          path: ./utils/dev_files

  check_diamond_storage:
    needs: [ generate_and_save_pr_files, generate_and_save_dev_files ]
    runs-on: ubuntu-latest

    steps:
      - name: Download PR Files Artifact
        uses: actions/download-artifact@v2
        with:
          name: pr_files

      - name: Download Dev Files Artifact
        uses: actions/download-artifact@v2
        with:
          name: dev_files

      - name: Compare PR and Dev Files
        run: |
          echo "PR files: "
          ls pr_files
          cat pr_files/pr_libs_storage_output_*.txt
          echo "Dev files: "
          ls dev_files
          cat dev_files/dev_libs_storage_output_*.txt
#
#      - name: Compare Storage
#        run: |
#          if [[ '${{ steps.save_pr_output.outputs.pr-storage-output }}' = '${{ steps.save_dev_output.outputs.dev-storage-output }}' ]]; then
#            echo "Diamond storage is the same"
#          else
#            echo "Diamond storage is different"
#          fi
#
